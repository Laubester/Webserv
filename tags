!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	web_page/42_upload/js/index.js	/^var ADD = "http:\/\/localhost:8000";$/;"	v
ADD	web_page/42_upload/js/upload.js	/^var ADD = "http:\/\/localhost:8000";$/;"	v
BAD_METHOD	src/http/Method.hpp	/^    BAD_METHOD,$/;"	e	enum:http::Method
BUFFER_SIZE	src/Script.cpp	/^#define BUFFER_SIZE /;"	d	file:
BUFFER_SIZE	src/Server.hpp	/^    static const size_t BUFFER_SIZE = 1024 * 10;$/;"	m	class:Server
Buffer	src/sock/Buffer.cpp	/^Buffer::Buffer(size_t size)$/;"	f	class:sock::Buffer
Buffer	src/sock/Buffer.hpp	/^class Buffer$/;"	c	namespace:sock
CONNECTION	src/sock/Socket.hpp	/^    CONNECTION$/;"	e	enum:sock::SocketType
CONNECTION_READ_EVENT	src/event/Event.hpp	/^    CONNECTION_READ_EVENT,$/;"	e	enum:event::EventType
CONNECTION_TIMEOUT	src/Server.hpp	/^    static const int CONNECTION_TIMEOUT = 20;$/;"	m	class:Server
CONNECTION_WRITE_EVENT	src/event/Event.hpp	/^    CONNECTION_WRITE_EVENT$/;"	e	enum:event::EventType
CONTENT_LENGTH_HEADER	src/http/HeaderMap.hpp	/^#define CONTENT_LENGTH_HEADER /;"	d
CXX	Makefile	/^CXX			=	clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS	=	-Wall -Wextra -Werror -Wpedantic -Wsign-conversion -std=c++98$/;"	m
Cgi_ext	src/Config.hpp	/^    struct Cgi_ext {$/;"	s	class:Config
Config	src/Config.hpp	/^class Config$/;"	c
ConfigParser	src/ConfigParser.cpp	/^ConfigParser::ConfigParser(std::string config_file)$/;"	f	class:ConfigParser
ConfigParser	src/ConfigParser.hpp	/^class ConfigParser$/;"	c
Connection	src/sock/Connection.cpp	/^Connection::Connection(const TcpStream* stream, size_t buffer_size)$/;"	f	class:sock::Connection
Connection	src/sock/Connection.hpp	/^class Connection : public Socket$/;"	c	namespace:sock
ConnectionReadEvent	src/event/ConnectionReadEvent.cpp	/^ConnectionReadEvent::ConnectionReadEvent(sock::Socket* connection)$/;"	f	class:event::ConnectionReadEvent
ConnectionReadEvent	src/event/ConnectionReadEvent.hpp	/^class ConnectionReadEvent : public Event$/;"	c	namespace:event
ConnectionWriteEvent	src/event/ConnectionWriteEvent.cpp	/^ConnectionWriteEvent::ConnectionWriteEvent(sock::Socket* connection)$/;"	f	class:event::ConnectionWriteEvent
ConnectionWriteEvent	src/event/ConnectionWriteEvent.hpp	/^class ConnectionWriteEvent : public Event$/;"	c	namespace:event
DELETE	src/http/Method.hpp	/^    DELETE,$/;"	e	enum:http::Method
DIRS	Makefile	/^DIRS		=	$(shell find $(SRC_DIR) -type d)$/;"	m
Error_page	src/Config.hpp	/^    struct Error_page {$/;"	s	class:Config
Event	src/event/Event.cpp	/^Event::Event(sock::Socket* socket)$/;"	f	class:event::Event
Event	src/event/Event.hpp	/^class Event$/;"	c	namespace:event
EventQueue	src/event/EventQueue.hpp	/^class EventQueue$/;"	c	namespace:event
EventType	src/event/Event.hpp	/^enum EventType {$/;"	g	namespace:event
Exception	src/ConfigParser.cpp	/^ConfigParser::Exception::Exception(const char* msg)$/;"	f	class:ConfigParser::Exception
Exception	src/ConfigParser.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:ConfigParser
Exception	src/Script.cpp	/^Script::Exception::Exception(const char* msg)$/;"	f	class:Script::Exception
Exception	src/Script.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:Script
Exception	src/Server.cpp	/^Server::Exception::Exception(const char* msg)$/;"	f	class:Server::Exception
Exception	src/Server.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:Server
Exception	src/http/Header.cpp	/^Header::Exception::Exception(const char* msg)$/;"	f	class:http::Header::Exception
Exception	src/http/Header.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::Header
Exception	src/http/Request.cpp	/^Request::Exception::Exception(const char* msg)$/;"	f	class:http::Request::Exception
Exception	src/http/Request.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::Request
Exception	src/http/RequestLine.cpp	/^RequestLine::Exception::Exception(const char* msg)$/;"	f	class:http::RequestLine::Exception
Exception	src/http/RequestLine.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::RequestLine
Exception	src/sock/Socket.cpp	/^Socket::Exception::Exception(const char* msg)$/;"	f	class:sock::Socket::Exception
Exception	src/sock/Socket.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:sock::Socket
Exception	src/sock/TcpStream.cpp	/^TcpStream::Exception::Exception(const char* msg)$/;"	f	class:sock::TcpStream::Exception
Exception	src/sock/TcpStream.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:sock::TcpStream
ExceptionBase	src/ExceptionBase.cpp	/^ExceptionBase::ExceptionBase(const char* msg)$/;"	f	class:ExceptionBase
ExceptionBase	src/ExceptionBase.hpp	/^class ExceptionBase : public std::exception$/;"	c
GET	src/http/Method.hpp	/^    GET,$/;"	e	enum:http::Method
Header	src/http/Header.cpp	/^Header::Header(const std::string& n, const std::string& v)$/;"	f	class:http::Header
Header	src/http/Header.cpp	/^Header::Header(const std::string& str)$/;"	f	class:http::Header
Header	src/http/Header.hpp	/^class Header$/;"	c	namespace:http
HeaderMap	src/http/HeaderMap.hpp	/^class HeaderMap$/;"	c	namespace:http
INCS	Makefile	/^INCS		=	$(shell find $(SRC_DIR) -type f -name *.hpp)$/;"	m
Listen	src/Config.hpp	/^    struct Listen {$/;"	s	class:Config
Location	src/Config.hpp	/^    class Location$/;"	c	class:Config
LocationContent	src/LocationContent.cpp	/^LocationContent::LocationContent()$/;"	f	class:LocationContent
LocationContent	src/LocationContent.hpp	/^class LocationContent$/;"	c
MAX_REQUEST_SIZE	src/Server.hpp	/^    static const ssize_t MAX_REQUEST_SIZE = 1024 * 200;$/;"	m	class:Server
MKDIR	Makefile	/^MKDIR		=	mkdir -p$/;"	m
MSG_SIZE	src/ExceptionBase.hpp	/^    static const std::size_t MSG_SIZE = 512;$/;"	m	class:ExceptionBase
Method	src/http/Method.hpp	/^enum Method {$/;"	g	namespace:http
NAME	Makefile	/^NAME		=	webserv$/;"	m
NoSepException	src/ServerParser.hpp	/^    class NoSepException : public std::exception$/;"	c	class:ServerParser
OBJS	Makefile	/^OBJS		=	$(addprefix $(OBJ_DIR)\/, $(SRCS_BASE:.cpp=.o))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR		=	obj$/;"	m
OPTIONS	src/http/Method.hpp	/^	OPTIONS$/;"	e	enum:http::Method
POLL_TIMEOUT	src/Server.hpp	/^    static const int POLL_TIMEOUT = 5000;$/;"	m	class:Server
POST	src/http/Method.hpp	/^    POST,$/;"	e	enum:http::Method
REQ_BODY	src/http/Request.hpp	/^    REQ_BODY,$/;"	e	enum:http::RequestState
REQ_DONE	src/http/Request.hpp	/^    REQ_DONE$/;"	e	enum:http::RequestState
REQ_EOL	src/http/RequestLine.hpp	/^#define REQ_EOL /;"	d
REQ_HEADERS	src/http/Request.hpp	/^    REQ_HEADERS,$/;"	e	enum:http::RequestState
REQ_LINE	src/http/Request.hpp	/^    REQ_LINE,$/;"	e	enum:http::RequestState
RM	Makefile	/^RM			=	rm -rf$/;"	m
Request	src/http/Request.cpp	/^Request::Request()$/;"	f	class:http::Request
Request	src/http/Request.cpp	/^Request::Request(const RequestLine& request_line)$/;"	f	class:http::Request
Request	src/http/Request.hpp	/^class Request$/;"	c	namespace:http
RequestLine	src/http/RequestLine.cpp	/^RequestLine::RequestLine()$/;"	f	class:http::RequestLine
RequestLine	src/http/RequestLine.cpp	/^RequestLine::RequestLine(sock::Buffer& request_data)$/;"	f	class:http::RequestLine
RequestLine	src/http/RequestLine.hpp	/^class RequestLine$/;"	c	namespace:http
RequestState	src/http/Request.hpp	/^enum RequestState {$/;"	g	namespace:http
Response	src/response/Response.hpp	/^    Response(\/* args *\/) {}$/;"	f	class:Response
Response	src/response/Response.hpp	/^class Response$/;"	c
Return_redirect	src/Config.hpp	/^    struct Return_redirect {$/;"	s	class:Config
SRCS	Makefile	/^SRCS		=	$(shell find $(SRC_DIR) -type f -name *.cpp)$/;"	m
SRCS_BASE	Makefile	/^SRCS_BASE	=	$(foreach file, $(SRCS), $(shell basename -a $(file)))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR		=	src$/;"	m
SUPPORTED_HTTP_VERSION	src/http/RequestLine.hpp	/^#define SUPPORTED_HTTP_VERSION /;"	d
Script	src/Script.cpp	/^Script::Script(Config& config, http::Request& request)$/;"	f	class:Script
Script	src/Script.hpp	/^class Script$/;"	c
Server	src/Server.cpp	/^Server::Server()$/;"	f	class:Server
Server	src/Server.hpp	/^class Server$/;"	c
ServerParser	src/ServerParser.cpp	/^ServerParser::ServerParser(std::string::iterator beg, std::string::iterator end)$/;"	f	class:ServerParser
ServerParser	src/ServerParser.hpp	/^class ServerParser$/;"	c
Socket	src/sock/Socket.cpp	/^Socket::Socket()$/;"	f	class:sock::Socket
Socket	src/sock/Socket.hpp	/^class Socket$/;"	c	namespace:sock
SocketArray	src/sock/SocketArray.hpp	/^class SocketArray$/;"	c	namespace:sock
SocketType	src/sock/Socket.hpp	/^enum SocketType {$/;"	g	namespace:sock
SyntaxException	src/ServerParser.hpp	/^    class SyntaxException : public std::exception$/;"	c	class:ServerParser
TCP_STREAM	src/sock/Socket.hpp	/^    TCP_STREAM,$/;"	e	enum:sock::SocketType
TCP_STREAM_EVENT	src/event/Event.hpp	/^    TCP_STREAM_EVENT,$/;"	e	enum:event::EventType
TRANSFER_ENCODING_HEADER	src/http/HeaderMap.hpp	/^#define TRANSFER_ENCODING_HEADER /;"	d
TcpStream	src/sock/TcpStream.cpp	/^TcpStream::TcpStream(in_addr address, uint16_t port)$/;"	f	class:sock::TcpStream
TcpStream	src/sock/TcpStream.hpp	/^class TcpStream : public Socket$/;"	c	namespace:sock
TcpStreamEvent	src/event/TcpStreamEvent.cpp	/^TcpStreamEvent::TcpStreamEvent(sock::Socket* stream)$/;"	f	class:event::TcpStreamEvent
TcpStreamEvent	src/event/TcpStreamEvent.hpp	/^class TcpStreamEvent : public Event$/;"	c	namespace:event
VPATH	Makefile	/^VPATH		=	$(SRC_DIR) $(DIRS)$/;"	m
WHITESPACE	src/Utils.hpp	/^#define WHITESPACE /;"	d
accept_connection	src/Server.cpp	/^void Server::accept_connection(const sock::TcpStream& stream)$/;"	f	class:Server
add	src/http/HeaderMap.cpp	/^void HeaderMap::add(const Header& header)$/;"	f	class:http::HeaderMap
add	src/sock/SocketArray.cpp	/^void SocketArray::add(Socket* socket)$/;"	f	class:sock::SocketArray
add_header	src/http/Request.cpp	/^void Request::add_header(const Header& header)$/;"	f	class:http::Request
addr	src/sock/Connection.cpp	/^sockaddr& Connection::addr(){$/;"	f	class:sock::Connection
addr_	src/sock/Connection.hpp	/^    sockaddr addr_;$/;"	m	class:sock::Connection
addr_	src/sock/TcpStream.hpp	/^    in_addr addr_;$/;"	m	class:sock::TcpStream
address	src/Config.hpp	/^        std::string address;$/;"	m	struct:Config::Listen
address	src/sock/TcpStream.cpp	/^in_addr TcpStream::address() const$/;"	f	class:sock::TcpStream
addrlen_	src/sock/Connection.hpp	/^    socklen_t addrlen_;$/;"	m	class:sock::Connection
advance_cursor	src/sock/Buffer.cpp	/^void Buffer::advance_cursor(size_t count)$/;"	f	class:sock::Buffer
append	src/sock/Buffer.hpp	/^    void append(Iter first, Iter last)$/;"	f	class:sock::Buffer
append_data	src/sock/Connection.hpp	/^    void append_data(DataIter first, DataIter last)$/;"	f	class:sock::Connection
autoindex	src/Config.hpp	/^        bool autoindex;$/;"	m	class:Config::Location
autoindex	src/Config.hpp	/^    bool autoindex;$/;"	m	class:Config
begin	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::begin() const$/;"	f	class:http::HeaderMap
begin	src/sock/SocketArray.cpp	/^SocketArray::iterator SocketArray::begin()$/;"	f	class:sock::SocketArray
bin_path	src/Config.hpp	/^        std::string bin_path;$/;"	m	struct:Config::Cgi_ext
bind	src/sock/TcpStream.cpp	/^void TcpStream::bind()$/;"	f	class:sock::TcpStream
body	src/http/Request.cpp	/^std::string Request::body() const$/;"	f	class:http::Request
body_	src/http/Request.hpp	/^    std::string body_;$/;"	m	class:http::Request
buf_	src/sock/Connection.hpp	/^    Buffer buf_;$/;"	m	class:sock::Connection
buffer	src/sock/Connection.cpp	/^Buffer& Connection::buffer()$/;"	f	class:sock::Connection
buildCmd	src/Script.cpp	/^void Script::buildCmd(std::string path, Config& config)$/;"	f	class:Script
buildContent	src/ServerParser.cpp	/^void ServerParser::buildContent()$/;"	f	class:ServerParser
buildEnv	src/Script.cpp	/^void	Script::buildEnv(http::Method& method){$/;"	f	class:Script
buildLocation	src/ServerParser.cpp	/^void ServerParser::buildLocation()$/;"	f	class:ServerParser
capacity	src/sock/Buffer.cpp	/^size_t Buffer::capacity() const$/;"	f	class:sock::Buffer
cgi_ext	src/Config.hpp	/^        std::vector<Cgi_ext> cgi_ext;$/;"	m	class:Config::Location
cgi_ext	src/Config.hpp	/^    std::vector<Cgi_ext> cgi_ext;$/;"	m	class:Config
check_init	src/sock/Socket.cpp	/^void Socket::check_init() const$/;"	f	class:sock::Socket
clean_spaces	src/ServerParser.cpp	/^std::string clean_spaces(std::string str)$/;"	f
clear	src/sock/SocketArray.cpp	/^void SocketArray::clear()$/;"	f	class:sock::SocketArray
client_max_body_size	src/Config.hpp	/^        unsigned long client_max_body_size; \/\/ Represented in megabytes (only takes m or M)$/;"	m	class:Config::Location
client_max_body_size	src/Config.hpp	/^    unsigned long client_max_body_size; \/\/ Represented in megabytes (only takes m or M)$/;"	m	class:Config
close_connection	src/Server.cpp	/^void Server::close_connection(sock::Connection& c)$/;"	f	class:Server
cmd	src/Script.hpp	/^    char** cmd;$/;"	m	class:Script
code	src/Config.hpp	/^        int code;$/;"	m	struct:Config::Return_redirect
code	src/Config.hpp	/^        std::vector<int> code;$/;"	m	struct:Config::Error_page
code	src/response/Response.hpp	/^    std::size_t	code;$/;"	m	class:Response
codeList	src/response/Response.hpp	/^    std::map<int, std::string> codeList;$/;"	m	class:Response
codeMsg	src/response/Response.hpp	/^    std::string codeMsg;$/;"	m	class:Response
combined	src/Config.hpp	/^        std::string combined;$/;"	m	struct:Config::Listen
config	src/ServerParser.hpp	/^    Config config;$/;"	m	class:ServerParser
configList_	src/Server.hpp	/^	std::vector<Config> configList_;$/;"	m	class:Server
configure	src/Server.cpp	/^void Server::configure(const std::vector<Config>& blocks)$/;"	f	class:Server
configured_	src/Server.hpp	/^    bool configured_;$/;"	m	class:Server
const_iterator	src/http/HeaderMap.hpp	/^    typedef std::map<std::string, std::string>::const_iterator const_iterator;$/;"	t	class:http::HeaderMap
contentLength	src/response/Response.hpp	/^    std::string contentLength;$/;"	m	class:Response
content_length	src/http/Request.cpp	/^ssize_t Request::content_length() const$/;"	f	class:http::Request
content_length_	src/http/Request.hpp	/^    ssize_t content_length_;$/;"	m	class:http::Request
createConfig	src/ConfigParser.cpp	/^void ConfigParser::createConfig()$/;"	f	class:ConfigParser
cursor	src/sock/Buffer.cpp	/^const char* Buffer::cursor() const$/;"	f	class:sock::Buffer
cursor_	src/sock/Buffer.hpp	/^    const char* cursor_;$/;"	m	class:sock::Buffer
data	src/event/Event.cpp	/^sock::Socket* Event::data()$/;"	f	class:event::Event
data	src/sock/Buffer.cpp	/^const char* Buffer::data() const$/;"	f	class:sock::Buffer
data_	src/sock/Buffer.hpp	/^    std::vector<char> data_;$/;"	m	class:sock::Buffer
empty	src/event/EventQueue.cpp	/^bool EventQueue::empty() const$/;"	f	class:event::EventQueue
end	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::end() const$/;"	f	class:http::HeaderMap
end	src/sock/SocketArray.cpp	/^SocketArray::iterator SocketArray::end()$/;"	f	class:sock::SocketArray
envp	src/Script.hpp	/^    char** envp;$/;"	m	class:Script
erase	src/sock/SocketArray.cpp	/^void SocketArray::erase(iterator pos)$/;"	f	class:sock::SocketArray
erase_to_cursor	src/sock/Buffer.cpp	/^void Buffer::erase_to_cursor()$/;"	f	class:sock::Buffer
error_page	src/Config.hpp	/^        std::vector<Error_page> error_page;$/;"	m	class:Config::Location
error_page	src/Config.hpp	/^    std::vector<Error_page> error_page;$/;"	m	class:Config
event	src/event/ConnectionReadEvent.cpp	/^namespace event$/;"	n	file:
event	src/event/ConnectionReadEvent.hpp	/^namespace event$/;"	n
event	src/event/ConnectionWriteEvent.cpp	/^namespace event$/;"	n	file:
event	src/event/ConnectionWriteEvent.hpp	/^namespace event$/;"	n
event	src/event/Event.cpp	/^namespace event$/;"	n	file:
event	src/event/Event.hpp	/^namespace event$/;"	n
event	src/event/EventQueue.cpp	/^namespace event$/;"	n	file:
event	src/event/EventQueue.hpp	/^namespace event$/;"	n
event	src/event/TcpStreamEvent.cpp	/^namespace event$/;"	n	file:
event	src/event/TcpStreamEvent.hpp	/^namespace event$/;"	n
events_	src/Server.hpp	/^    event::EventQueue events_;$/;"	m	class:Server
events_	src/event/EventQueue.hpp	/^    std::queue<Event*> events_;$/;"	m	class:event::EventQueue
exception_errno	src/Utils.hpp	/^void exception_errno(std::string msg)$/;"	f
exec	src/Script.cpp	/^std::string Script::exec()$/;"	f	class:Script
extension	src/Config.hpp	/^        std::string extension;$/;"	m	struct:Config::Cgi_ext
fd	src/sock/Socket.cpp	/^int Socket::fd() const$/;"	f	class:sock::Socket
fd_	src/sock/Socket.hpp	/^    int fd_;$/;"	m	class:sock::Socket
file_content	src/ConfigParser.hpp	/^    std::string file_content;$/;"	m	class:ConfigParser
find	src/sock/Buffer.cpp	/^const char* Buffer::find(const char* sep, size_t sep_size) const$/;"	f	class:sock::Buffer
find	src/sock/SocketArray.cpp	/^SocketArray::iterator SocketArray::find(int fd)$/;"	f	class:sock::SocketArray
findLocEnd	src/ServerParser.cpp	/^std::size_t ServerParser::findLocEnd(std::size_t i, std::size_t end)$/;"	f	class:ServerParser
findLocStart	src/ServerParser.cpp	/^std::size_t ServerParser::findLocStart(std::size_t i)$/;"	f	class:ServerParser
findServerEnd	src/ConfigParser.cpp	/^std::string::iterator ConfigParser::findServerEnd(std::string::iterator start,$/;"	f	class:ConfigParser
findServerStart	src/ConfigParser.cpp	/^void ConfigParser::findServerStart(std::string::iterator& start)$/;"	f	class:ConfigParser
front	src/event/EventQueue.cpp	/^EventQueue::reference EventQueue::front()$/;"	f	class:event::EventQueue
generate_fake_config	src/ServerParser.cpp	/^void ServerParser::generate_fake_config()$/;"	f	class:ServerParser
get	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::get(std::string name) const$/;"	f	class:http::HeaderMap
getContent	src/ConfigParser.cpp	/^std::string ConfigParser::getContent(std::fstream& file)$/;"	f	class:ConfigParser
getRespConfigs	src/Server.cpp	/^std::vector<Config> getRespConfigs(sock::Connection c, std::vector<Config>& configList_){$/;"	f
get_ext	src/Script.cpp	/^std::string Script::get_ext(std::string& path)$/;"	f	class:Script
get_next_word	src/Utils.cpp	/^std::string get_next_word(sock::Buffer& buf, const char* sep, size_t sep_size)$/;"	f
get_next_word	src/Utils.cpp	/^std::string get_next_word(std::string& str, const std::string& sep)$/;"	f
get_time	web_page/42_logtime/js/index.js	/^var get_time = document.getElementById("get_time");$/;"	v
headerString	src/response/Response.hpp	/^    std::string headerString;$/;"	m	class:Response
headers	src/http/Request.cpp	/^HeaderMap Request::headers() const{$/;"	f	class:http::Request
headers_	src/http/HeaderMap.hpp	/^    std::map<std::string, std::string> headers_;$/;"	m	class:http::HeaderMap
headers_	src/http/Request.hpp	/^    HeaderMap headers_;$/;"	m	class:http::Request
host_fd	src/sock/Connection.cpp	/^int Connection::host_fd() const$/;"	f	class:sock::Connection
http	src/http/Handlers.cpp	/^namespace http$/;"	n	file:
http	src/http/Handlers.hpp	/^namespace http$/;"	n
http	src/http/Header.cpp	/^namespace http$/;"	n	file:
http	src/http/Header.hpp	/^namespace http$/;"	n
http	src/http/HeaderMap.cpp	/^namespace http$/;"	n	file:
http	src/http/HeaderMap.hpp	/^namespace http$/;"	n
http	src/http/Method.cpp	/^namespace http$/;"	n	file:
http	src/http/Method.hpp	/^namespace http$/;"	n
http	src/http/Request.cpp	/^namespace http$/;"	n	file:
http	src/http/Request.hpp	/^namespace http$/;"	n
http	src/http/RequestLine.cpp	/^namespace http$/;"	n	file:
http	src/http/RequestLine.hpp	/^namespace http$/;"	n
http_version	src/http/RequestLine.cpp	/^const std::string& RequestLine::http_version() const$/;"	f	class:http::RequestLine
http_version_	src/http/RequestLine.hpp	/^    std::string http_version_;$/;"	m	class:http::RequestLine
index	src/Config.hpp	/^        std::vector<std::string> index;$/;"	m	class:Config::Location
index	src/Config.hpp	/^    std::vector<std::string> index;$/;"	m	class:Config
init	src/sock/Connection.cpp	/^void Connection::init()$/;"	f	class:sock::Connection
init	src/sock/TcpStream.cpp	/^void TcpStream::init()$/;"	f	class:sock::TcpStream
init_location_vars	src/ServerParser.cpp	/^void ServerParser::init_location_vars(Config::Location& new_location)$/;"	f	class:ServerParser
init_server_vars	src/ServerParser.cpp	/^void ServerParser::init_server_vars()$/;"	f	class:ServerParser
init_tcp_streams	src/Server.cpp	/^void Server::init_tcp_streams()$/;"	f	class:Server
is_chunked_	src/http/Request.hpp	/^    bool is_chunked_;$/;"	m	class:http::Request
is_init	src/sock/Socket.cpp	/^bool Socket::is_init() const$/;"	f	class:sock::Socket
is_init_	src/sock/Socket.hpp	/^    bool is_init_;$/;"	m	class:sock::Socket
iterator	src/sock/SocketArray.hpp	/^    typedef std::vector<Socket*>::iterator iterator;$/;"	t	class:sock::SocketArray
limit_except	src/Config.hpp	/^        std::vector<std::string> limit_except;$/;"	m	class:Config::Location
listen	src/Config.hpp	/^    Listen listen;$/;"	m	class:Config
listen	src/sock/TcpStream.cpp	/^void TcpStream::listen()$/;"	f	class:sock::TcpStream
loc_content	src/LocationContent.hpp	/^    std::vector<std::string> loc_content;$/;"	m	class:LocationContent
loc_content_str	src/LocationContent.hpp	/^    std::string loc_content_str;$/;"	m	class:LocationContent
location	src/Config.hpp	/^    std::vector<Location> location;$/;"	m	class:Config
location	src/ServerParser.hpp	/^    std::vector<LocationContent> location;$/;"	m	class:ServerParser
location	src/response/Response.hpp	/^    std::string location;$/;"	m	class:Response
location_match	src/Config.hpp	/^        std::string location_match;$/;"	m	class:Config::Location
main	src/main.cpp	/^int main(int argc, char** argv)$/;"	f
method	src/http/RequestLine.cpp	/^Method RequestLine::method() const$/;"	f	class:http::RequestLine
method_	src/http/RequestLine.hpp	/^    Method method_;$/;"	m	class:http::RequestLine
method_from_str	src/http/Method.cpp	/^Method method_from_str(const std::string& str)$/;"	f	namespace:http
method_str	src/http/Method.cpp	/^const char* method_str(Method method)$/;"	f	namespace:http
min_server	src/ConfigParser.hpp	/^    bool min_server;$/;"	m	class:ConfigParser
msg_	src/ExceptionBase.hpp	/^    char msg_[MSG_SIZE];$/;"	m	class:ExceptionBase
name	src/http/Header.cpp	/^const std::string& Header::name() const$/;"	f	class:http::Header
name_	src/http/Header.hpp	/^    std::string name_;$/;"	m	class:http::Header
nbServer	src/ConfigParser.cpp	/^unsigned int ConfigParser::nbServer() const{$/;"	f	class:ConfigParser
nb_location	src/ServerParser.hpp	/^    int nb_location;$/;"	m	class:ServerParser
nb_server	src/ConfigParser.hpp	/^    unsigned int nb_server;$/;"	m	class:ConfigParser
next_request_state	src/sock/Connection.cpp	/^void Connection::next_request_state()$/;"	f	class:sock::Connection
operator ==	src/sock/TcpStream.cpp	/^bool TcpStream::operator==(const TcpStream& rhs) const$/;"	f	class:sock::TcpStream
parse_body	src/http/Handlers.cpp	/^void parse_body(sock::Connection& c)$/;"	f	namespace:http
parse_content_length	src/http/Request.cpp	/^void Request::parse_content_length(const std::string& value)$/;"	f	class:http::Request
parse_header	src/http/Request.cpp	/^void Request::parse_header(const Header& header)$/;"	f	class:http::Request
parse_headers	src/http/Handlers.cpp	/^void parse_headers(sock::Connection& c)$/;"	f	namespace:http
parse_http_request_line	src/http/Handlers.cpp	/^void parse_http_request_line(sock::Connection& c)$/;"	f	namespace:http
parse_location_vars	src/ServerParser.cpp	/^void ServerParser::parse_location_vars()$/;"	f	class:ServerParser
parse_request_line	src/http/Handlers.cpp	/^void parse_request_line(sock::Connection& c)$/;"	f	namespace:http
parse_server_vars	src/ServerParser.cpp	/^void ServerParser::parse_server_vars()$/;"	f	class:ServerParser
parse_transfer_encoding	src/http/Request.cpp	/^void Request::parse_transfer_encoding(std::string value)$/;"	f	class:http::Request
path	src/LocationContent.hpp	/^    std::string path;$/;"	m	class:LocationContent
path	src/http/RequestLine.cpp	/^const std::string& RequestLine::path() const$/;"	f	class:http::RequestLine
path_	src/http/RequestLine.hpp	/^    std::string path_;$/;"	m	class:http::RequestLine
pfds_	src/Server.hpp	/^    std::vector<pollfd> pfds_;$/;"	m	class:Server
pop	src/event/EventQueue.cpp	/^Event* EventQueue::pop()$/;"	f	class:event::EventQueue
port	src/Config.hpp	/^        int port;$/;"	m	struct:Config::Listen
port	src/sock/TcpStream.cpp	/^uint16_t TcpStream::port() const$/;"	f	class:sock::TcpStream
port_	src/sock/TcpStream.hpp	/^    uint16_t port_;$/;"	m	class:sock::TcpStream
print	src/http/Request.cpp	/^void Request::print() const$/;"	f	class:http::Request
printContent	src/ServerParser.cpp	/^void ServerParser::printContent() const$/;"	f	class:ServerParser
printLocation	src/ServerParser.cpp	/^void ServerParser::printLocation() const$/;"	f	class:ServerParser
print_config	src/Config.cpp	/^void Config::print_config()$/;"	f	class:Config
print_location	src/Config.cpp	/^void Config::Location::print_location()$/;"	f	class:Config::Location
process_event_queue	src/Server.cpp	/^void Server::process_event_queue()$/;"	f	class:Server
push	src/event/EventQueue.cpp	/^void EventQueue::push(Event* event)$/;"	f	class:event::EventQueue
putstr_fd	src/Utils.cpp	/^void putstr_fd(std::string msg, std::size_t fd)$/;"	f
query	src/http/RequestLine.cpp	/^const std::string& RequestLine::query() const$/;"	f	class:http::RequestLine
query_str_	src/http/RequestLine.hpp	/^    std::string query_str_;$/;"	m	class:http::RequestLine
read	src/sock/Socket.cpp	/^bool Socket::read() const$/;"	f	class:sock::Socket
read_	src/sock/Socket.hpp	/^    bool read_;$/;"	m	class:sock::Socket
receive_data	src/Server.cpp	/^void Server::receive_data(sock::Connection& c)$/;"	f	class:Server
reference	src/event/EventQueue.hpp	/^    typedef std::queue<Event*>::reference reference;$/;"	t	class:event::EventQueue
request	src/Script.hpp	/^    http::Request& request;$/;"	m	class:Script
request	src/sock/Connection.cpp	/^http::Request& Connection::request()$/;"	f	class:sock::Connection
requestLine	src/http/Request.cpp	/^RequestLine& Request::requestLine()$/;"	f	class:http::Request
request_	src/sock/Connection.hpp	/^    http::Request request_;$/;"	m	class:sock::Connection
request_line_	src/http/Request.hpp	/^    RequestLine request_line_;$/;"	m	class:http::Request
request_state	src/sock/Connection.cpp	/^http::RequestState Connection::request_state() const$/;"	f	class:sock::Connection
request_state_	src/sock/Connection.hpp	/^    http::RequestState request_state_;$/;"	m	class:sock::Connection
return_redirect	src/Config.hpp	/^        Return_redirect return_redirect;$/;"	m	class:Config::Location
return_redirect	src/Config.hpp	/^    Return_redirect return_redirect;$/;"	m	class:Config
root	src/Config.hpp	/^        std::string root;$/;"	m	class:Config::Location
root	src/Config.hpp	/^    std::string root;$/;"	m	class:Config
run	src/Server.cpp	/^void Server::run()$/;"	f	class:Server
server_content	src/ServerParser.hpp	/^    std::vector<std::string> server_content;$/;"	m	class:ServerParser
server_name	src/Config.hpp	/^    std::vector<std::string> server_name;$/;"	m	class:Config
serverparser	src/ConfigParser.hpp	/^    std::vector<ServerParser> serverparser;$/;"	m	class:ConfigParser
set_body	src/http/Request.cpp	/^void Request::set_body(const std::string& body)$/;"	f	class:http::Request
set_write	src/sock/Socket.cpp	/^void Socket::set_write()$/;"	f	class:sock::Socket
showFile	web_page/42_upload/js/upload.js	/^function showFile(file){$/;"	f
size	src/sock/Buffer.cpp	/^size_t Buffer::size() const$/;"	f	class:sock::Buffer
size_	src/sock/Buffer.hpp	/^    const size_t size_;$/;"	m	class:sock::Buffer
sock	src/sock/Buffer.cpp	/^namespace sock$/;"	n	file:
sock	src/sock/Buffer.hpp	/^namespace sock$/;"	n
sock	src/sock/Connection.cpp	/^namespace sock$/;"	n	file:
sock	src/sock/Connection.hpp	/^namespace sock$/;"	n
sock	src/sock/Socket.cpp	/^namespace sock$/;"	n	file:
sock	src/sock/Socket.hpp	/^namespace sock$/;"	n
sock	src/sock/SocketArray.cpp	/^namespace sock$/;"	n	file:
sock	src/sock/SocketArray.hpp	/^namespace sock$/;"	n
sock	src/sock/TcpStream.cpp	/^namespace sock$/;"	n	file:
sock	src/sock/TcpStream.hpp	/^namespace sock$/;"	n
socket_	src/event/Event.hpp	/^    sock::Socket* socket_;$/;"	m	class:event::Event
sockets_	src/Server.hpp	/^    sock::SocketArray sockets_;$/;"	m	class:Server
sockets_	src/sock/SocketArray.hpp	/^    std::vector<Socket*> sockets_;$/;"	m	class:sock::SocketArray
space_left	src/sock/Buffer.cpp	/^size_t Buffer::space_left() const$/;"	f	class:sock::Buffer
str_content	src/ServerParser.hpp	/^    std::string str_content;$/;"	m	class:ServerParser
stream_	src/sock/Connection.hpp	/^    const TcpStream* stream_;$/;"	m	class:sock::Connection
to_lower	src/Utils.cpp	/^void to_lower(std::string& str)$/;"	f
trim	src/Utils.cpp	/^std::string trim(const std::string& str, const std::string& sep)$/;"	f
type	src/event/ConnectionReadEvent.cpp	/^EventType ConnectionReadEvent::type() const$/;"	f	class:event::ConnectionReadEvent
type	src/event/ConnectionWriteEvent.cpp	/^EventType ConnectionWriteEvent::type() const$/;"	f	class:event::ConnectionWriteEvent
type	src/event/TcpStreamEvent.cpp	/^EventType TcpStreamEvent::type() const$/;"	f	class:event::TcpStreamEvent
type	src/sock/Connection.cpp	/^SocketType Connection::type() const$/;"	f	class:sock::Connection
type	src/sock/TcpStream.cpp	/^SocketType TcpStream::type() const$/;"	f	class:sock::TcpStream
uri	src/Config.hpp	/^        std::string uri;$/;"	m	struct:Config::Error_page
url	src/Config.hpp	/^        std::string url;$/;"	m	struct:Config::Return_redirect
value	src/http/Header.cpp	/^const std::string& Header::value() const$/;"	f	class:http::Header
value_	src/http/Header.hpp	/^    std::string value_;$/;"	m	class:http::Header
vectorize_content	src/Utils.cpp	/^bool vectorize_content(std::vector<std::string>& content, std::string& content_str)$/;"	f
what	src/ExceptionBase.cpp	/^const char* ExceptionBase::what() const throw()$/;"	f	class:ExceptionBase
what	src/ServerParser.cpp	/^const char* ServerParser::NoSepException::what() const throw()$/;"	f	class:ServerParser::NoSepException
what	src/ServerParser.cpp	/^const char* ServerParser::SyntaxException::what() const throw()$/;"	f	class:ServerParser::SyntaxException
~ConfigParser	src/ConfigParser.cpp	/^ConfigParser::~ConfigParser()$/;"	f	class:ConfigParser
~Event	src/event/Event.cpp	/^Event::~Event()$/;"	f	class:event::Event
~EventQueue	src/event/EventQueue.cpp	/^EventQueue::~EventQueue()$/;"	f	class:event::EventQueue
~LocationContent	src/LocationContent.hpp	/^    ~LocationContent(){};$/;"	f	class:LocationContent
~Response	src/response/Response.hpp	/^    ~Response() {}$/;"	f	class:Response
~Script	src/Script.cpp	/^Script::~Script()$/;"	f	class:Script
~ServerParser	src/ServerParser.hpp	/^    ~ServerParser(){};$/;"	f	class:ServerParser
~Socket	src/sock/Socket.cpp	/^Socket::~Socket()$/;"	f	class:sock::Socket
~SocketArray	src/sock/SocketArray.cpp	/^SocketArray::~SocketArray()$/;"	f	class:sock::SocketArray
