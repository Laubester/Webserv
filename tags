!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BAD_METHOD	include/http/Method.hpp	/^    BAD_METHOD,$/;"	e	enum:http::Method
CONTENT_LENGTH_HEADER	include/http/HeaderMap.hpp	/^#define CONTENT_LENGTH_HEADER /;"	d
CXX	Makefile	/^CXX			=	clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS	=	-Wall -Wextra -Werror -Wpedantic -Wsign-conversion -std=c++98$/;"	m
Cgi_ext	include/ServerParser.hpp	/^    struct Cgi_ext {$/;"	s	class:Config
Config	include/ServerParser.hpp	/^class Config$/;"	c
ConfigFileException	include/ConfigParser.hpp	/^    class ConfigFileException : public std::exception$/;"	c	class:ConfigParser
ConfigParser	include/ConfigParser.hpp	/^class ConfigParser$/;"	c
ConfigParser	src/ConfigParser.cpp	/^ConfigParser::ConfigParser(std::string config_file)$/;"	f	class:ConfigParser
ConfigSyntaxException	include/ConfigParser.hpp	/^    class ConfigSyntaxException : public std::exception$/;"	c	class:ConfigParser
DELETE	include/http/Method.hpp	/^    DELETE$/;"	e	enum:http::Method
DIRS	Makefile	/^DIRS		=	$(shell find $(SRC_DIR) -type d)$/;"	m
Error_page	include/ServerParser.hpp	/^    struct Error_page {$/;"	s	class:Config
Exception	include/http/Header.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::Header
Exception	include/http/Request.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::Request
Exception	include/http/RequestLine.hpp	/^    class Exception : public ExceptionBase$/;"	c	class:http::RequestLine
Exception	src/http/Header.cpp	/^Header::Exception::Exception(const char* msg)$/;"	f	class:http::Header::Exception
Exception	src/http/Request.cpp	/^Request::Exception::Exception(const char* msg)$/;"	f	class:http::Request::Exception
Exception	src/http/RequestLine.cpp	/^RequestLine::Exception::Exception(const char* msg)$/;"	f	class:http::RequestLine::Exception
ExceptionBase	include/ExceptionBase.hpp	/^class ExceptionBase : public std::exception$/;"	c
ExceptionBase	src/ExceptionBase.cpp	/^ExceptionBase::ExceptionBase(const char* msg)$/;"	f	class:ExceptionBase
GET	include/http/Method.hpp	/^    GET,$/;"	e	enum:http::Method
Header	include/http/Header.hpp	/^class Header$/;"	c	namespace:http
Header	src/http/Header.cpp	/^Header::Header(const std::string& n, const std::string& v)$/;"	f	class:http::Header
Header	src/http/Header.cpp	/^Header::Header(const std::string& str)$/;"	f	class:http::Header
HeaderMap	include/http/HeaderMap.hpp	/^class HeaderMap$/;"	c	namespace:http
INCS	Makefile	/^INCS		=	$(shell find $(INC_DIR) -type f -name *.hpp)$/;"	m
INC_DIR	Makefile	/^INC_DIR		=	include$/;"	m
Listen	include/ServerParser.hpp	/^    struct Listen$/;"	s	class:Config
Location	include/ServerParser.hpp	/^    class Location {$/;"	c	class:Config
LocationContent	include/LocationContent.hpp	/^class LocationContent$/;"	c
LocationContent	src/LocationContent.cpp	/^LocationContent::LocationContent()$/;"	f	class:LocationContent
MAX_REQUEST_LINE_SIZE	include/http/RequestLine.hpp	/^    static const std::size_t MAX_REQUEST_LINE_SIZE = 1024 * 8;$/;"	m	class:http::RequestLine
MKDIR	Makefile	/^MKDIR		=	mkdir -p$/;"	m
MSG_SIZE	include/ExceptionBase.hpp	/^    static const std::size_t MSG_SIZE = 512;$/;"	m	class:ExceptionBase
Method	include/http/Method.hpp	/^enum Method {$/;"	g	namespace:http
NAME	Makefile	/^NAME		=	webserv$/;"	m
NoSepException	include/ServerParser.hpp	/^		class NoSepException : public std::exception{$/;"	c	class:ServerParser
OBJS	Makefile	/^OBJS		=	$(addprefix $(OBJ_DIR)\/, $(SRCS_BASE:.cpp=.o))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR		=	obj$/;"	m
POST	include/http/Method.hpp	/^    POST,$/;"	e	enum:http::Method
RM	Makefile	/^RM			=	rm -rf$/;"	m
Request	include/http/Request.hpp	/^class Request$/;"	c	namespace:http
Request	src/http/Request.cpp	/^Request::Request(const RequestLine& request_line, std::string request_str)$/;"	f	class:http::Request
RequestLine	include/http/RequestLine.hpp	/^class RequestLine$/;"	c	namespace:http
RequestLine	src/http/RequestLine.cpp	/^RequestLine::RequestLine()$/;"	f	class:http::RequestLine
RequestLine	src/http/RequestLine.cpp	/^RequestLine::RequestLine(std::string request_str)$/;"	f	class:http::RequestLine
Return_redirect	include/ServerParser.hpp	/^    struct Return_redirect$/;"	s	class:Config
SRCS	Makefile	/^SRCS		=	$(shell find $(SRC_DIR) -type f -name *.cpp)$/;"	m
SRCS_BASE	Makefile	/^SRCS_BASE	=	$(foreach file, $(SRCS), $(shell basename -a $(file)))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR		=	src$/;"	m
SUPPORTED_HTTP_VERSION	include/http/RequestLine.hpp	/^#define SUPPORTED_HTTP_VERSION /;"	d
Server	include/Server.hpp	/^class Server$/;"	c
ServerParser	include/ServerParser.hpp	/^class ServerParser{$/;"	c
ServerParser	src/ServerParser.cpp	/^ServerParser::ServerParser(std::string::iterator beg, std::string::iterator end) : str_content(beg, end){$/;"	f	class:ServerParser
SyntaxException	include/ServerParser.hpp	/^		class SyntaxException : public std::exception{$/;"	c	class:ServerParser
TRANSFER_ENCODING_HEADER	include/http/HeaderMap.hpp	/^#define TRANSFER_ENCODING_HEADER /;"	d
VPATH	Makefile	/^VPATH		=	$(SRC_DIR) $(DIRS)$/;"	m
WHITESPACE	include/Utils.hpp	/^#define WHITESPACE /;"	d
add	src/http/HeaderMap.cpp	/^void HeaderMap::add(const Header& header)$/;"	f	class:http::HeaderMap
address	include/ServerParser.hpp	/^      std::string address;$/;"	m	struct:Config::Listen
autoindex	include/ServerParser.hpp	/^      bool                      autoindex;$/;"	m	class:Config::Location
autoindex	include/ServerParser.hpp	/^    bool                      autoindex;$/;"	m	class:Config
begin	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::begin() const$/;"	f	class:http::HeaderMap
bin_path	include/ServerParser.hpp	/^        std::string bin_path;$/;"	m	struct:Config::Cgi_ext
body_	include/http/Request.hpp	/^    std::string body_;$/;"	m	class:http::Request
buildContent	src/ServerParser.cpp	/^void	ServerParser::buildContent(){$/;"	f	class:ServerParser
buildLocation	src/ServerParser.cpp	/^void	ServerParser::buildLocation(){$/;"	f	class:ServerParser
cgi_ext	include/ServerParser.hpp	/^      std::vector<Cgi_ext>      cgi_ext;$/;"	m	class:Config::Location
cgi_ext	include/ServerParser.hpp	/^    std::vector<Cgi_ext>      cgi_ext;$/;"	m	class:Config
clean_spaces	src/ServerParser.cpp	/^std::string clean_spaces(std::string str)$/;"	f
client_max_body_size	include/ServerParser.hpp	/^      unsigned long             client_max_body_size; \/\/ Represented in megabytes (only takes m or M)$/;"	m	class:Config::Location
client_max_body_size	include/ServerParser.hpp	/^    unsigned long             client_max_body_size; \/\/ Represented in megabytes (only takes m or M)$/;"	m	class:Config
code	include/ServerParser.hpp	/^        int code;$/;"	m	struct:Config::Return_redirect
code	include/ServerParser.hpp	/^        std::vector<int> code;$/;"	m	struct:Config::Error_page
config	include/ServerParser.hpp	/^    Config config;$/;"	m	class:ServerParser
const_iterator	include/http/HeaderMap.hpp	/^    typedef std::map<std::string, std::string>::const_iterator const_iterator;$/;"	t	class:http::HeaderMap
content_length	src/http/Request.cpp	/^ssize_t Request::content_length() const$/;"	f	class:http::Request
content_length_	include/http/Request.hpp	/^    ssize_t content_length_;$/;"	m	class:http::Request
createConfig	src/ConfigParser.cpp	/^void ConfigParser::createConfig()$/;"	f	class:ConfigParser
end	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::end() const$/;"	f	class:http::HeaderMap
error_page	include/ServerParser.hpp	/^      std::vector<Error_page>   error_page;$/;"	m	class:Config::Location
error_page	include/ServerParser.hpp	/^    std::vector<Error_page>   error_page;$/;"	m	class:Config
extension	include/ServerParser.hpp	/^        std::string extension;$/;"	m	struct:Config::Cgi_ext
file_content	include/ConfigParser.hpp	/^    std::string file_content;$/;"	m	class:ConfigParser
findLocEnd	src/ServerParser.cpp	/^std::size_t ServerParser::findLocEnd(std::size_t i, std::size_t end){$/;"	f	class:ServerParser
findLocStart	src/ServerParser.cpp	/^std::size_t	ServerParser::findLocStart(std::size_t i){$/;"	f	class:ServerParser
findServerEnd	src/ConfigParser.cpp	/^std::string::iterator ConfigParser::findServerEnd(std::string::iterator start,$/;"	f	class:ConfigParser
findServerStart	src/ConfigParser.cpp	/^void ConfigParser::findServerStart(std::string::iterator& start)$/;"	f	class:ConfigParser
first_line	src/main.cpp	/^std::string first_line(std::string& str)$/;"	f
generate_fake_config	src/ServerParser.cpp	/^void ServerParser::generate_fake_config()$/;"	f	class:ServerParser
get	src/http/HeaderMap.cpp	/^HeaderMap::const_iterator HeaderMap::get(std::string name) const$/;"	f	class:http::HeaderMap
getContent	src/ConfigParser.cpp	/^std::string ConfigParser::getContent(std::fstream& file)$/;"	f	class:ConfigParser
get_next_word	src/Utils.cpp	/^std::string get_next_word(std::string& str, const std::string& sep)$/;"	f
headers_	include/http/HeaderMap.hpp	/^    std::map<std::string, std::string> headers_;$/;"	m	class:http::HeaderMap
headers_	include/http/Request.hpp	/^    HeaderMap headers_;$/;"	m	class:http::Request
http	include/http/Header.hpp	/^namespace http$/;"	n
http	include/http/HeaderMap.hpp	/^namespace http$/;"	n
http	include/http/Method.hpp	/^namespace http$/;"	n
http	include/http/Request.hpp	/^namespace http$/;"	n
http	include/http/RequestLine.hpp	/^namespace http$/;"	n
http	src/http/Header.cpp	/^namespace http$/;"	n	file:
http	src/http/HeaderMap.cpp	/^namespace http$/;"	n	file:
http	src/http/Method.cpp	/^namespace http$/;"	n	file:
http	src/http/Request.cpp	/^namespace http$/;"	n	file:
http	src/http/RequestLine.cpp	/^namespace http$/;"	n	file:
http_version	src/http/RequestLine.cpp	/^const std::string& RequestLine::http_version() const$/;"	f	class:http::RequestLine
http_version_	include/http/RequestLine.hpp	/^    std::string http_version_;$/;"	m	class:http::RequestLine
index	include/ServerParser.hpp	/^      std::vector<std::string>  index;$/;"	m	class:Config::Location
index	include/ServerParser.hpp	/^    std::vector<std::string>  index;$/;"	m	class:Config
init_server_vars	src/ServerParser.cpp	/^void ServerParser::init_server_vars()$/;"	f	class:ServerParser
is_chunked_	include/http/Request.hpp	/^    bool is_chunked_;$/;"	m	class:http::Request
limit_except	include/ServerParser.hpp	/^      std::vector<std::string>  limit_except;$/;"	m	class:Config::Location
listen	include/ServerParser.hpp	/^    Listen                    listen;$/;"	m	class:Config
loc_content	include/LocationContent.hpp	/^    std::vector<std::string> loc_content;$/;"	m	class:LocationContent
loc_content_str	include/LocationContent.hpp	/^    std::string loc_content_str;$/;"	m	class:LocationContent
location	include/ServerParser.hpp	/^		std::vector<LocationContent>	location;$/;"	m	class:ServerParser
location	include/ServerParser.hpp	/^    std::vector<Location>     location;$/;"	m	class:Config
location_match	include/ServerParser.hpp	/^      std::string               location_match;$/;"	m	class:Config::Location
main	src/main.cpp	/^int main(int argc, char** argv)$/;"	f
method	src/http/RequestLine.cpp	/^Method RequestLine::method() const$/;"	f	class:http::RequestLine
method_	include/http/RequestLine.hpp	/^    Method method_;$/;"	m	class:http::RequestLine
method_from_str	src/http/Method.cpp	/^Method method_from_str(const std::string& str)$/;"	f	namespace:http
method_str	src/http/Method.cpp	/^const char* method_str(Method method)$/;"	f	namespace:http
min_server	include/ConfigParser.hpp	/^    bool min_server;$/;"	m	class:ConfigParser
msg_	include/ExceptionBase.hpp	/^    char msg_[MSG_SIZE];$/;"	m	class:ExceptionBase
name	src/http/Header.cpp	/^const std::string& Header::name() const$/;"	f	class:http::Header
name_	include/http/Header.hpp	/^    std::string name_;$/;"	m	class:http::Header
nb_location	include/ServerParser.hpp	/^    int nb_location;$/;"	m	class:ServerParser
nb_server	include/ConfigParser.hpp	/^    unsigned int nb_server;$/;"	m	class:ConfigParser
parse_content_length	src/http/Request.cpp	/^void Request::parse_content_length(const std::string& value)$/;"	f	class:http::Request
parse_header	src/http/Request.cpp	/^void Request::parse_header(const Header& header)$/;"	f	class:http::Request
parse_server_vars	src/ServerParser.cpp	/^void ServerParser::parse_server_vars()$/;"	f	class:ServerParser
parse_transfer_encoding	src/http/Request.cpp	/^void Request::parse_transfer_encoding(std::string value)$/;"	f	class:http::Request
path	include/LocationContent.hpp	/^    std::string path;$/;"	m	class:LocationContent
path	src/http/RequestLine.cpp	/^const std::string& RequestLine::path() const$/;"	f	class:http::RequestLine
path_	include/http/RequestLine.hpp	/^    std::string path_;$/;"	m	class:http::RequestLine
port	include/ServerParser.hpp	/^      int port;$/;"	m	struct:Config::Listen
print	src/http/Request.cpp	/^void Request::print() const$/;"	f	class:http::Request
printContent	src/ServerParser.cpp	/^void	ServerParser::printContent() const{$/;"	f	class:ServerParser
printLocation	src/ServerParser.cpp	/^void	ServerParser::printLocation() const{$/;"	f	class:ServerParser
print_config	include/ServerParser.hpp	/^    void print_config()$/;"	f	class:Config
query	src/http/RequestLine.cpp	/^const std::string& RequestLine::query() const$/;"	f	class:http::RequestLine
query_str_	include/http/RequestLine.hpp	/^    std::string query_str_;$/;"	m	class:http::RequestLine
request_line_	include/http/Request.hpp	/^    RequestLine request_line_;$/;"	m	class:http::Request
return_redirect	include/ServerParser.hpp	/^      Return_redirect           return_redirect;$/;"	m	class:Config::Location
root	include/ServerParser.hpp	/^      std::string               root;$/;"	m	class:Config::Location
root	include/ServerParser.hpp	/^    std::string               root;$/;"	m	class:Config
server_content	include/ServerParser.hpp	/^		std::vector<std::string> server_content;$/;"	m	class:ServerParser
server_name	include/ServerParser.hpp	/^    std::vector<std::string>  server_name;$/;"	m	class:Config
serverparser	include/ConfigParser.hpp	/^    std::vector<ServerParser> serverparser;$/;"	m	class:ConfigParser
set_body	src/http/Request.cpp	/^void Request::set_body(const std::string& body)$/;"	f	class:http::Request
str_content	include/ServerParser.hpp	/^		std::string	str_content;$/;"	m	class:ServerParser
to_lower	src/Utils.cpp	/^void to_lower(std::string& str)$/;"	f
trim	src/Utils.cpp	/^std::string trim(const std::string& str, const std::string& sep)$/;"	f
uri	include/ServerParser.hpp	/^        std::string uri;$/;"	m	struct:Config::Error_page
url	include/ServerParser.hpp	/^        std::string url;$/;"	m	struct:Config::Return_redirect
value	src/http/Header.cpp	/^const std::string& Header::value() const$/;"	f	class:http::Header
value_	include/http/Header.hpp	/^    std::string value_;$/;"	m	class:http::Header
vectorize_content	src/Utils.cpp	/^bool vectorize_content(std::vector<std::string>& content, std::string& content_str)$/;"	f
what	src/ConfigParser.cpp	/^const char* ConfigParser::ConfigFileException::what() const throw()$/;"	f	class:ConfigParser::ConfigFileException
what	src/ConfigParser.cpp	/^const char* ConfigParser::ConfigSyntaxException::what() const throw()$/;"	f	class:ConfigParser::ConfigSyntaxException
what	src/ExceptionBase.cpp	/^const char* ExceptionBase::what() const throw()$/;"	f	class:ExceptionBase
what	src/ServerParser.cpp	/^const char* ServerParser::NoSepException::what() const throw(){$/;"	f	class:ServerParser::NoSepException
what	src/ServerParser.cpp	/^const char* ServerParser::SyntaxException::what() const throw()$/;"	f	class:ServerParser::SyntaxException
~ConfigParser	src/ConfigParser.cpp	/^ConfigParser::~ConfigParser()$/;"	f	class:ConfigParser
~LocationContent	include/LocationContent.hpp	/^    ~LocationContent(){};$/;"	f	class:LocationContent
~ServerParser	include/ServerParser.hpp	/^		~ServerParser(){};$/;"	f	class:ServerParser
