!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CXX	Makefile	/^CXX			=	clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS	=	-Wall -Wextra -Werror -Wpedantic -Wsign-conversion -std=c++98$/;"	m
Cgi_ext	include/ServerParser.hpp	/^    struct Cgi_ext$/;"	s	class:Config
Config	include/ServerParser.hpp	/^class Config$/;"	c
ConfigFileException	include/ConfigParser.hpp	/^	class ConfigFileException : public std::exception{$/;"	c	class:ConfigParser
ConfigParser	include/ConfigParser.hpp	/^class ConfigParser$/;"	c
ConfigParser	src/ConfigParser.cpp	/^ConfigParser::ConfigParser(std::string config_file){$/;"	f	class:ConfigParser
ConfigSyntaxException	include/ConfigParser.hpp	/^	class ConfigSyntaxException : public std::exception{$/;"	c	class:ConfigParser
DELETE	include/method.hpp	/^    DELETE,$/;"	e	enum:http::Method
DIRS	Makefile	/^DIRS		=	$(shell find $(SRC_DIR) -type d)$/;"	m
Error_page	include/ServerParser.hpp	/^    struct Error_page$/;"	s	class:Config
GET	include/method.hpp	/^    GET,$/;"	e	enum:http::Method
Header	include/header.hpp	/^class Header$/;"	c	namespace:http
INCS	Makefile	/^INCS		=	$(shell find $(INC_DIR) -type f -name *.hpp)$/;"	m
INC_DIR	Makefile	/^INC_DIR		=	include$/;"	m
Listen	include/ServerParser.hpp	/^    struct Listen$/;"	s	class:Config
LocationContent	include/LocationContent.hpp	/^class LocationContent$/;"	c
LocationContent	src/LocationContent.cpp	/^LocationContent::LocationContent(){$/;"	f	class:LocationContent
MKDIR	Makefile	/^MKDIR		=	mkdir -p$/;"	m
Method	include/method.hpp	/^enum Method {$/;"	g	namespace:http
NAME	Makefile	/^NAME		=	webserv$/;"	m
NoSepException	include/ServerParser.hpp	/^		class NoSepException : public std::exception{$/;"	c	class:ServerParser
OBJS	Makefile	/^OBJS		=	$(addprefix $(OBJ_DIR)\/, $(SRCS_BASE:.cpp=.o))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR		=	obj$/;"	m
POST	include/method.hpp	/^    POST,$/;"	e	enum:http::Method
RM	Makefile	/^RM			=	rm -rf$/;"	m
Request	include/Request.hpp	/^class Request$/;"	c	namespace:http
Response	include/response.hpp	/^class Response$/;"	c	namespace:http
Return_redirect	include/ServerParser.hpp	/^    struct Return_redirect$/;"	s	class:Config
SRCS	Makefile	/^SRCS		=	$(shell find $(SRC_DIR) -type f -name *.cpp)$/;"	m
SRCS_BASE	Makefile	/^SRCS_BASE	=	$(foreach file, $(SRCS), $(shell basename -a $(file)))$/;"	m
SRC_DIR	Makefile	/^SRC_DIR		=	src$/;"	m
Server	include/Server.hpp	/^class Server$/;"	c
ServerParser	include/ServerParser.hpp	/^class ServerParser{$/;"	c
ServerParser	src/ServerParser.cpp	/^ServerParser::ServerParser(std::string::iterator beg, std::string::iterator end) : str_content(beg, end){$/;"	f	class:ServerParser
SyntaxException	include/ServerParser.hpp	/^		class SyntaxException : public std::exception{$/;"	c	class:ServerParser
VPATH	Makefile	/^VPATH		=	$(SRC_DIR) $(DIRS)$/;"	m
address	include/ServerParser.hpp	/^      std::string address;$/;"	m	struct:Config::Listen
autoindex	include/ServerParser.hpp	/^    bool                      autoindex;$/;"	m	class:Config
bin_path	include/ServerParser.hpp	/^      std::string bin_path;$/;"	m	struct:Config::Cgi_ext
buildContent	src/ServerParser.cpp	/^void	ServerParser::buildContent(){$/;"	f	class:ServerParser
buildLocation	src/ServerParser.cpp	/^void	ServerParser::buildLocation(){$/;"	f	class:ServerParser
cgi_ext	include/ServerParser.hpp	/^    std::vector<Cgi_ext>      cgi_ext;$/;"	m	class:Config
client_max_body_size	include/ServerParser.hpp	/^    unsigned long             client_max_body_size; \/\/ Represented in bytes$/;"	m	class:Config
code	include/ServerParser.hpp	/^        int code;$/;"	m	struct:Config::Return_redirect
code	include/ServerParser.hpp	/^      std::vector<int> code;$/;"	m	struct:Config::Error_page
config	include/ServerParser.hpp	/^    Config config;$/;"	m	class:ServerParser
createConfig	src/ConfigParser.cpp	/^void	ConfigParser::createConfig(){$/;"	f	class:ConfigParser
error_page	include/ServerParser.hpp	/^    std::vector<Error_page>   error_page;$/;"	m	class:Config
extension	include/ServerParser.hpp	/^      std::string extension;$/;"	m	struct:Config::Cgi_ext
file_content	include/ConfigParser.hpp	/^	std::string					file_content;$/;"	m	class:ConfigParser
findLocEnd	src/ServerParser.cpp	/^std::size_t ServerParser::findLocEnd(std::size_t i, std::size_t end){$/;"	f	class:ServerParser
findLocStart	src/ServerParser.cpp	/^std::size_t	ServerParser::findLocStart(std::size_t i){$/;"	f	class:ServerParser
findServerEnd	src/ConfigParser.cpp	/^std::string::iterator ConfigParser::findServerEnd(std::string::iterator start, std::string::iterator end){$/;"	f	class:ConfigParser
findServerStart	src/ConfigParser.cpp	/^void ConfigParser::findServerStart(std::string::iterator& start){$/;"	f	class:ConfigParser
generate_fake_config	src/ServerParser.cpp	/^void ServerParser::generate_fake_config()$/;"	f	class:ServerParser
getContent	src/ConfigParser.cpp	/^std::string ConfigParser::getContent(std::fstream& file){$/;"	f	class:ConfigParser
get_next_word	src/Utils.cpp	/^std::string get_next_word(std::string& str, const std::string& sep)$/;"	f
http	include/Request.hpp	/^namespace http$/;"	n
http	include/header.hpp	/^namespace http$/;"	n
http	include/method.hpp	/^namespace http$/;"	n
http	include/response.hpp	/^namespace http$/;"	n
index	include/ServerParser.hpp	/^    std::vector<std::string>  index;$/;"	m	class:Config
limit_except	include/ServerParser.hpp	/^    std::vector<std::string>  limit_except;$/;"	m	class:Config
listen	include/ServerParser.hpp	/^    Listen                    listen;$/;"	m	class:Config
loc_content	include/LocationContent.hpp	/^	std::vector<std::string>	loc_content;$/;"	m	class:LocationContent
loc_content_str	include/LocationContent.hpp	/^	std::string					loc_content_str;$/;"	m	class:LocationContent
location	include/ServerParser.hpp	/^		std::vector<LocationContent>	location;$/;"	m	class:ServerParser
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f
min_server	include/ConfigParser.hpp	/^	bool						min_server;$/;"	m	class:ConfigParser
name	include/header.hpp	/^    std::string name;$/;"	m	class:http::Header
nb_location	include/ServerParser.hpp	/^		int								nb_location;$/;"	m	class:ServerParser
nb_server	include/ConfigParser.hpp	/^	unsigned int				nb_server;$/;"	m	class:ConfigParser
path	include/LocationContent.hpp	/^	std::string					path;$/;"	m	class:LocationContent
port	include/ServerParser.hpp	/^      int port;$/;"	m	struct:Config::Listen
printContent	src/ServerParser.cpp	/^void	ServerParser::printContent() const{$/;"	f	class:ServerParser
printLocation	src/ServerParser.cpp	/^void	ServerParser::printLocation() const{$/;"	f	class:ServerParser
print_config	include/ServerParser.hpp	/^    void print_config()$/;"	f	class:Config
return_redirect	include/ServerParser.hpp	/^    Return_redirect           return_redirect;$/;"	m	class:Config
root	include/ServerParser.hpp	/^    std::string               root;$/;"	m	class:Config
server_content	include/ServerParser.hpp	/^		std::vector<std::string> server_content;$/;"	m	class:ServerParser
server_name	include/ServerParser.hpp	/^    std::vector<std::string>  server_name;$/;"	m	class:Config
serverparser	include/ConfigParser.hpp	/^	std::vector<ServerParser>	serverparser;$/;"	m	class:ConfigParser
str_content	include/ServerParser.hpp	/^		std::string	str_content;$/;"	m	class:ServerParser
to_lower	src/Utils.cpp	/^void to_lower(std::string& str)$/;"	f
trim	src/Utils.cpp	/^std::string trim(const std::string& str, char sep)$/;"	f
trim_white_spaces	src/Utils.cpp	/^std::string	trim_white_spaces(std::string str){$/;"	f
uri	include/ServerParser.hpp	/^      std::string uri;$/;"	m	struct:Config::Error_page
url	include/ServerParser.hpp	/^        std::string url;$/;"	m	struct:Config::Return_redirect
value	include/header.hpp	/^    std::string value;$/;"	m	class:http::Header
vectorize_content	src/Utils.cpp	/^bool	vectorize_content(std::vector<std::string>& content, std::string& content_str){$/;"	f
what	src/ConfigParser.cpp	/^const char* ConfigParser::ConfigFileException::what() const throw(){$/;"	f	class:ConfigParser::ConfigFileException
what	src/ConfigParser.cpp	/^const char* ConfigParser::ConfigSyntaxException::what() const throw(){$/;"	f	class:ConfigParser::ConfigSyntaxException
what	src/ServerParser.cpp	/^const char* ServerParser::NoSepException::what() const throw(){$/;"	f	class:ServerParser::NoSepException
what	src/ServerParser.cpp	/^const char* ServerParser::SyntaxException::what() const throw(){$/;"	f	class:ServerParser::SyntaxException
~ConfigParser	src/ConfigParser.cpp	/^ConfigParser::~ConfigParser(){}$/;"	f	class:ConfigParser
~LocationContent	include/LocationContent.hpp	/^	~LocationContent(){};$/;"	f	class:LocationContent
~ServerParser	include/ServerParser.hpp	/^		~ServerParser(){};$/;"	f	class:ServerParser
